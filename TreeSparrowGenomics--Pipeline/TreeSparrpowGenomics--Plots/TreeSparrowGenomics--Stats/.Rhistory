### The BEGINNING ~~~~~
##
# ~ Plots TreeSparrowGenomics--Stats | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("TreeSparrow--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("TreeSparrow--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("Aizawl", fulldf$Sample_ID), "Aizawl",
ifelse(grepl("Eastermar", fulldf$Sample_ID), "Eastermar",
ifelse(grepl("PMON2002KOR0002U", PCAauto_Annot$Sample_ID), "South Korea",
ifelse(grepl("PMON", fulldf$Sample_ID), "Japan",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Malta",
ifelse(grepl("Zhabagly", fulldf$Sample_ID), "Zhabagly",
ifelse(grepl("PHL", fulldf$Sample_ID), "Philippines", "Error")))))))
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("TreeSparrow--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("TreeSparrow--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("Aizawl", fulldf$Sample_ID), "Aizawl",
ifelse(grepl("Eastermar", fulldf$Sample_ID), "Eastermar",
ifelse(grepl("PMON2002KOR0002U", PCAauto_Annot$Sample_ID), "South Korea",
ifelse(grepl("PMON", fulldf$Sample_ID), "Japan",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Malta",
ifelse(grepl("Zhabagly", fulldf$Sample_ID), "Zhabagly",
ifelse(grepl("PHL", fulldf$Sample_ID), "Philippines", "Error")))))))
### The BEGINNING ~~~~~
##
# ~ Plots TreeSparrowGenomics--Stats | By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
library(lemon)
# Loads datasets ~
Stats <- read.table("TreeSparrow--Stats.txt", sep = "\t", header = TRUE,
stringsAsFactors = FALSE)
Adaptors <- read.table("TreeSparrow--Stats_Adaptors.txt", sep = "\t", header = FALSE,
stringsAsFactors = FALSE); colnames(Adaptors) <- c("Sample_ID", "reads_adaptors")
# Combines DFs ~
fulldf <- merge(Stats, Adaptors, by = "Sample_ID")
# Gets total_reads ~
fulldf$total_reads <-
fulldf$seq_reads_pairs * 2
# Gets percentages ~
fulldf$percentage_retained_reads <-
fulldf$seq_retained_reads * 100 / fulldf$total_reads
fulldf$reads_adaptors <-
fulldf$reads_adaptors * 100 / fulldf$total_reads
# Fixes percentages ~
fulldf$hits_raw_frac <- fulldf$hits_raw_frac * 100
fulldf$hits_clonality <- fulldf$hits_clonality  * 100
fulldf$hits_unique_frac <- fulldf$hits_unique_frac * 100
# Expands PCA_Annot by adding Population ~
fulldf$Population <- ifelse(grepl("Aizawl", fulldf$Sample_ID), "Aizawl",
ifelse(grepl("Eastermar", fulldf$Sample_ID), "Eastermar",
ifelse(grepl("PMON2002KOR0002U", fulldf$Sample_ID), "South Korea",
ifelse(grepl("PMON", fulldf$Sample_ID), "Japan",
ifelse(grepl("TreeSparrow", fulldf$Sample_ID), "Malta",
ifelse(grepl("Zhabagly", fulldf$Sample_ID), "Zhabagly",
ifelse(grepl("PHL", fulldf$Sample_ID), "Philippines", "Error")))))))
# Reorders Population ~
fulldf$Population <- factor(fulldf$Population, ordered = T,
levels = c("Eastermar",
"Malta",
"Zhabagly",
"Aizawl",
"Philippines",
"South Korea",
"Japan"))
# Cleans DF ~
fulldf <- fulldf %>%
select(Population, total_reads, reads_adaptors, percentage_retained_reads,
hits_raw_frac, hits_clonality, hits_unique_frac, hits_coverage)
# Converts DF from wide into long ~
fulldfUp <- gather(fulldf, Stat, Value, "total_reads", "reads_adaptors", "percentage_retained_reads",
"hits_raw_frac", "hits_clonality", "hits_unique_frac", "hits_coverage")
# Reorders Stat ~
fulldfUp$Stat <- factor(fulldfUp$Stat, ordered = T,
levels = c("hits_coverage",
"hits_unique_frac",
"hits_clonality",
"hits_raw_frac",
"percentage_retained_reads",
"reads_adaptors",
"total_reads"))
# Corrects facet labels ~
ylabels <- c("total_reads" = "# of Reads",
"reads_adaptors" = "% of Reads With Adaptors",
"percentage_retained_reads" = "% of Reads Retained",
"hits_raw_frac" = "% of Mapped Reads",
"hits_clonality" = "% of Clonality",
"hits_unique_frac" = "% of Uniquely Mapped Reads",
"hits_coverage" = "Mean Depth")
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1, suffix = "X")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1, big.mark = "")(z),
scales::label_number(accuracy = 1, scale = 1/1000000, big.mark = "", suffix = "M")(z))}
# Creates the panel ~
TreeSparrowGenomics_Stat <-
ggplot() +
#geom_violin(data = fulldfUp, aes(x = Population, y = Value),
#            fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .45, width = 1) +
geom_boxplot(data = fulldfUp, aes(x = Population, y = Value, fill = Population),
outlier.shape = NA, width = .5, lwd = .25, colour = "#000000", alpha = .7) +
#stat_summary(data = fulldfUp, aes(x = Population, y = Value),
#             fun = mean, geom = "point", shape = 21, size = 2.5, alpha = 1, colour = "#000000", fill = "#df65b0") +
facet_rep_grid(Stat ~. , scales = "free", labeller = labeller(Stat = ylabels)) +
scale_y_continuous(#limits = limits_fun,
#breaks = breaks_fun,
labels = labels_fun) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major = element_line(color = "#E5E7E9", linetype = "dashed", linewidth = .005),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
axis.line = element_line(colour = "#000000", linewidth = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 12, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 12, face = "bold"),
axis.ticks.x = element_line(color = "#000000", linewidth = .3),
axis.ticks.y = element_line(color = "#000000", linewidth = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
strip.text = element_text(colour = "#000000", size = 12, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank()) +
guides(fill = guide_legend(title = "Population", title.theme = element_text(size = 17, face = "bold"),
label.theme = element_text(size = 16),
override.aes = list(starshape = 15, size = 4.25, alpha = .7, starstroke = .15), nrow = 1, order = 1),
starshape = "none",
colour = "none")
# Saves the panel ~
ggsave(TreeSparrowGenomics_Stat, file = "TreeSparrowGenomics--Stats.pdf",
device = cairo_pdf, width = 12, height = 22, scale = 1, dpi = 600)
